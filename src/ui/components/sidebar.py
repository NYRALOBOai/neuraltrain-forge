#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Componente da sidebar para navega√ß√£o no NeuralTrain Forge.
"""

import streamlit as st
from typing import Dict, Any


def render():
    """Renderiza a sidebar com navega√ß√£o e informa√ß√µes do sistema."""
    
    with st.sidebar:
        # Logo e t√≠tulo
        st.markdown("# üß† NeuralTrain Forge")
        st.markdown("### Plataforma de Fine-tuning")
        st.markdown("---")
        
        # Menu de navega√ß√£o
        st.markdown("## üìã Navega√ß√£o")
        
        # Bot√µes de navega√ß√£o
        if st.button("üè† In√≠cio", use_container_width=True):
            st.session_state.page = "home"
            st.rerun()
        
        if st.button("üì§ Upload de Modelos", use_container_width=True):
            st.session_state.page = "model_upload"
            st.rerun()
        
        if st.button("üìä Upload de Datasets", use_container_width=True):
            st.session_state.page = "dataset_upload"
            st.rerun()
        
        if st.button("‚öôÔ∏è Configura√ß√£o de Treino", use_container_width=True):
            st.session_state.page = "training"
            st.rerun()
        
        if st.button("üìà Resultados", use_container_width=True):
            st.session_state.page = "results"
            st.rerun()
        
        st.markdown("---")
        
        # Informa√ß√µes do sistema
        st.markdown("## üíª Sistema")
        
        # Status da GPU
        try:
            import torch
            if torch.cuda.is_available():
                gpu_name = torch.cuda.get_device_name(0)
                gpu_memory = torch.cuda.get_device_properties(0).total_memory / (1024**3)
                st.success(f"üéÆ GPU: {gpu_name}")
                st.info(f"üíæ VRAM: {gpu_memory:.1f}GB")
            else:
                st.warning("‚ö†Ô∏è GPU n√£o dispon√≠vel")
        except ImportError:
            st.error("‚ùå PyTorch n√£o instalado")
        
        # Informa√ß√µes de mem√≥ria
        try:
            import psutil
            memory = psutil.virtual_memory()
            st.info(f"üß† RAM: {memory.available / (1024**3):.1f}GB dispon√≠vel")
            st.info(f"üíΩ Uso: {memory.percent}%")
        except ImportError:
            pass
        
        st.markdown("---")
        
        # Status do treinamento
        st.markdown("## üîÑ Status do Treino")
        
        # Verifica se h√° treinamento em andamento
        if 'training_status' in st.session_state:
            status = st.session_state.training_status
            
            if status.get('is_training', False):
                st.warning("üîÑ Treinamento em andamento")
                
                # Progress bar
                progress = status.get('progress', 0)
                st.progress(progress / 100)
                st.caption(f"Progresso: {progress:.1f}%")
                
                # Job atual
                current_job = status.get('current_job')
                if current_job:
                    st.caption(f"Job: {current_job}")
                
                # Bot√£o para parar treinamento
                if st.button("‚èπÔ∏è Parar Treino", type="secondary", use_container_width=True):
                    # Aqui seria chamada a fun√ß√£o para parar o treinamento
                    st.warning("Funcionalidade de parar treino ser√° implementada")
            else:
                st.success("‚úÖ Sistema pronto")
        else:
            st.success("‚úÖ Sistema pronto")
        
        st.markdown("---")
        
        # Informa√ß√µes da aplica√ß√£o
        st.markdown("## ‚ÑπÔ∏è Sobre")
        st.caption("**Vers√£o:** 1.0.0")
        st.caption("**Framework:** Streamlit + PEFT")
        st.caption("**Suporte:** LoRA, QLoRA")
        
        # Links √∫teis
        st.markdown("## üîó Links")
        st.markdown("[üìñ Documenta√ß√£o](https://github.com)")
        st.markdown("[üêõ Reportar Bug](https://github.com)")
        st.markdown("[üí° Sugest√µes](https://github.com)")


def show_page_indicator(current_page: str):
    """
    Mostra indicador da p√°gina atual.
    
    Args:
        current_page: Nome da p√°gina atual
    """
    page_names = {
        "home": "üè† In√≠cio",
        "model_upload": "üì§ Upload de Modelos", 
        "dataset_upload": "üìä Upload de Datasets",
        "training": "‚öôÔ∏è Configura√ß√£o de Treino",
        "results": "üìà Resultados"
    }
    
    current_name = page_names.get(current_page, current_page)
    st.sidebar.markdown(f"**üìç P√°gina atual:** {current_name}")


def show_quick_stats():
    """Mostra estat√≠sticas r√°pidas na sidebar."""
    
    st.sidebar.markdown("## üìä Estat√≠sticas")
    
    # Placeholder para estat√≠sticas
    # Estas seriam obtidas dos managers em uma implementa√ß√£o real
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        st.metric("Modelos", "0", help="Modelos carregados")
        st.metric("Jobs", "0", help="Jobs de treinamento")
    
    with col2:
        st.metric("Datasets", "0", help="Datasets dispon√≠veis")
        st.metric("Conclu√≠dos", "0", help="Treinamentos conclu√≠dos")


def show_resource_monitor():
    """Mostra monitor de recursos na sidebar."""
    
    st.sidebar.markdown("## üìä Recursos")
    
    try:
        import psutil
        import torch
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        st.sidebar.progress(cpu_percent / 100)
        st.sidebar.caption(f"CPU: {cpu_percent}%")
        
        # Mem√≥ria
        memory = psutil.virtual_memory()
        st.sidebar.progress(memory.percent / 100)
        st.sidebar.caption(f"RAM: {memory.percent}%")
        
        # GPU (se dispon√≠vel)
        if torch.cuda.is_available():
            gpu_memory = torch.cuda.memory_allocated() / torch.cuda.max_memory_allocated() * 100
            st.sidebar.progress(gpu_memory / 100)
            st.sidebar.caption(f"VRAM: {gpu_memory:.1f}%")
            
    except Exception as e:
        st.sidebar.error(f"Erro ao obter recursos: {e}")


def show_recent_activity():
    """Mostra atividade recente na sidebar."""
    
    st.sidebar.markdown("## üïí Atividade Recente")
    
    # Placeholder para atividade recente
    activities = [
        "üì§ Modelo carregado: LLaMA-7B",
        "üìä Dataset processado: chat_data",
        "‚öôÔ∏è Treino iniciado: job_001",
        "‚úÖ Treino conclu√≠do: job_000"
    ]
    
    for activity in activities[:3]:  # Mostra apenas os 3 mais recentes
        st.sidebar.caption(activity)
    
    if len(activities) > 3:
        st.sidebar.caption(f"... e mais {len(activities) - 3} atividades")


def render_advanced():
    """Vers√£o avan√ßada da sidebar com mais funcionalidades."""
    
    with st.sidebar:
        # Header principal
        st.markdown("# üß† NeuralTrain Forge")
        st.markdown("### Plataforma de Fine-tuning")
        
        # Indicador da p√°gina atual
        show_page_indicator(st.session_state.get('page', 'home'))
        
        st.markdown("---")
        
        # Menu de navega√ß√£o principal
        render()
        
        # Estat√≠sticas r√°pidas
        show_quick_stats()
        
        # Monitor de recursos
        show_resource_monitor()
        
        # Atividade recente
        show_recent_activity()

